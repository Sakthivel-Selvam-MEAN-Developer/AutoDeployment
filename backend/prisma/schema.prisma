generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "multiSchema"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis, timescaledb]
  schemas    = ["wonderMove", "peopleOrg", "identity", "subContract"]
}

model customers {
  id              Int      @id @default(autoincrement())
  name            String?  @unique
  pan             String?
  gst             String?
  iGst            String?
  sGst            String?
  cGst            String?
  isGstBilling    Boolean?
  ourVendorCode   String?
  isTDSApplicable Boolean?
  tdsPercentage   Int?
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)
  contactPersonId Int?     @unique
  contactPerson   people?  @relation(fields: [contactPersonId], references: [id])
  addressLine1    String?
  addressLine2    String?
  AddressLine3    String?
  pincode         BigInt?
  state           String?
  city            String?

  @@schema("wonderMove")
}

model people {
  id        Int        @id @default(autoincrement())
  name      String?
  email     String?
  mobile    BigInt?
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)
  customers customers?

  @@schema("wonderMove")
}

model vehicles {
  id                  Int                 @id @default(autoincrement())
  number              String?             @unique
  make                String?
  type                String?
  ownershipType       String?
  ownerName           String?
  insuranceExpiryDate DateTime?           @db.Timestamptz(6)
  taxExpiryDate       DateTime?           @db.Timestamptz(6)
  npPermitDate        DateTime?           @db.Timestamptz(6)
  fiveYearPermitDate  DateTime?           @db.Timestamptz(6)
  fcDate              DateTime?           @db.Timestamptz(6)
  createdAt           DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime            @updatedAt @db.Timestamptz(6)
  traccarDevice       traccarDevice?
  gpsStops            gpsStops[]
  vehicleMovements    vehicleMovements[]
  loconavDevice       loconavDevice?
  ktTelematicsDevice  ktTelematicsDevice?

  @@schema("wonderMove")
}

model traccarDevice {
  id        Int      @id @default(autoincrement())
  traccarId Int      @unique
  vehicleId Int      @unique
  vehicle   vehicles @relation(fields: [vehicleId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@schema("wonderMove")
}

model loconavDevice {
  id              Int      @id @default(autoincrement())
  loconavDeviceId Int      @unique
  vehicleId       Int      @unique
  loconavToken    String
  vehicle         vehicles @relation(fields: [vehicleId], references: [id])
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  @@schema("wonderMove")
}

model ktTelematicsDevice {
  id                   Int      @id @default(autoincrement())
  ktTelematicsDeviceId Int      @unique
  vehicleId            Int      @unique
  ktTelematicsToken    String
  vehicle              vehicles @relation(fields: [vehicleId], references: [id])
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime @updatedAt @db.Timestamptz(6)

  @@schema("wonderMove")
}

model stopReasons {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  stops     stops[]  @relation

  @@schema("wonderMove")
}

model stops {
  id               Int         @id @default(autoincrement())
  startTime        Int
  endTime          Int
  durationInMillis Int
  active           Boolean     @default(true)
  reason           stopReasons @relation(fields: [stopReasonId], references: [id])
  stopReasonId     Int
  gpsStop          gpsStops    @relation(fields: [gpsStopId], references: [id])
  gpsStopId        Int
  createdAt        DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime    @updatedAt @db.Timestamptz(6)

  @@schema("wonderMove")
}

model gpsStops {
  id               Int      @id @default(autoincrement())
  startTime        Int
  endTime          Int
  durationInMillis Int
  vehicle          vehicles @relation(fields: [vehicleId], references: [id])
  vehicleId        Int
  latitude         Float
  longitude        Float
  source           String
  stops            stops[]
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)

  @@unique([vehicleId, startTime], name: "vehicleStop")
  @@schema("wonderMove")
}

model vehicleMovements {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  eventTime Int
  latitude  Float
  longitude Float
  source    String
  speed     Float
  vehicleId Int
  vehicle   vehicles @relation(fields: [vehicleId], references: [id])

  @@schema("wonderMove")
}

model leaveReasons {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  leaves    leaves[]

  @@schema("peopleOrg")
}

model leaves {
  id            Int          @id @default(autoincrement())
  appliedOn     Int
  from          Int
  to            Int
  isFromHalfDay Boolean
  isToHalfDay   Boolean
  active        Boolean      @default(true)
  approval      Boolean?
  comments      String
  deniedComment String?
  leaveReasonId Int
  leaveReason   leaveReasons @relation(fields: [leaveReasonId], references: [id])
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(6)
  employeeId    String
  employee      employees    @relation(fields: [employeeId], references: [employeeId])

  @@schema("peopleOrg")
}

model orgUnits {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @updatedAt @db.Timestamptz(6)
  employees          employees[]
  orgUnitHeads       orgUnitHeads[]
  parentOrgRelations orgUnitRelations[] @relation("ParentRelations")
  childOrgRelations  orgUnitRelations[] @relation("ChildRelations")

  @@schema("peopleOrg")
}

model employees {
  id           Int            @id @default(autoincrement())
  employeeId   String         @unique
  name         String
  jobTitle     String
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt @db.Timestamptz(6)
  orgUnitId    Int
  orgUnit      orgUnits       @relation(fields: [orgUnitId], references: [id])
  orgUnitHeads orgUnitHeads[]
  leaves       leaves[]

  @@schema("peopleOrg")
}

model orgUnitHeads {
  id         Int        @id @default(autoincrement())
  orgUnit    orgUnits?  @relation(fields: [orgUnitId], references: [id])
  orgHead    employees? @relation(fields: [employeeId], references: [id])
  orgUnitId  Int?
  employeeId Int?

  @@schema("peopleOrg")
}

model orgUnitRelations {
  id          Int       @id @default(autoincrement())
  parentOrg   orgUnits? @relation("ParentRelations", fields: [parentOrgId], references: [id])
  childOrg    orgUnits? @relation("ChildRelations", fields: [childOrgId], references: [id])
  parentOrgId Int?
  childOrgId  Int?

  @@schema("peopleOrg")
}

model transporter {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  hasGst        Boolean     @default(false)
  gstNumber     Int?
  tdsPercentage Int
  bankDetailsId Int
  bankDetails   bankDetails @relation(fields: [bankDetailsId], references: [id])
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @db.Timestamptz(6)
  trucks        truck[]

  @@schema("subContract")
}

model bankDetails {
  id            Int           @id @default(autoincrement())
  accountHolder String
  accountNumber Int           @unique
  ifsc          String
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
  transporter   transporter[]
  // bunk          bunk[]

  @@schema("subContract")
}

model cementCompany {
  id                  Int              @id @default(autoincrement())
  name                String           @unique
  gstNo               String
  address             String
  emailId             String
  contactPersonName   String
  contactPersonNumber String
  loadingPoints       loadingPoint[]
  stockPoints         stockPoint[]
  unloadingPoints     unloadingPoint[]
  createdAt           DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime         @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}

model loadingPoint {
  id                               Int                                @id @default(autoincrement())
  name                             String                             @unique
  location                         String?
  createdAt                        DateTime                           @default(now()) @db.Timestamptz(6)
  updatedAt                        DateTime                           @updatedAt @db.Timestamptz(6)
  loadingPointToStockPointTrip     loadingPointToStockPointTrip[]
  loadingPointToUnloadingPointTrip loadingPointToUnloadingPointTrip[]
  cementCompany                    cementCompany                      @relation(fields: [cementCompanyId], references: [id])
  cementCompanyId                  Int
  pricePoint                       pricePoint[]

  @@schema("subContract")
}

model stockPoint {
  id                             Int                              @id @default(autoincrement())
  name                           String
  location                       String?
  loadingPointToStockPointTrip   loadingPointToStockPointTrip[]
  stockPointToUnloadingPointTrip stockPointToUnloadingPointTrip[]
  createdAt                      DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt                      DateTime                         @updatedAt @db.Timestamptz(6)
  cementCompany                  cementCompany                    @relation(fields: [cementCompanyId], references: [id])
  cementCompanyId                Int

  @@schema("subContract")
}

model unloadingPoint {
  id                               Int                                @id @default(autoincrement())
  name                             String                             @unique
  location                         String?
  stockPointToUnloadingPointTrip   stockPointToUnloadingPointTrip[]
  loadingPointToUnloadingPointTrip loadingPointToUnloadingPointTrip[]
  createdAt                        DateTime                           @default(now()) @db.Timestamptz(6)
  updatedAt                        DateTime                           @updatedAt @db.Timestamptz(6)
  cementCompany                    cementCompany                      @relation(fields: [cementCompanyId], references: [id])
  cementCompanyId                  Int
  pricePoint                       pricePoint[]

  @@schema("subContract")
}

model loadingPointToStockPointTrip {
  id                Int          @id @default(autoincrement())
  fuel              fuel[]
  startDate         Int
  filledLoad        Int
  invoiceNumber     String
  freightAmount     Int
  transporterAmount Int
  loadingPointId    Int
  loadingPoint      loadingPoint @relation(fields: [loadingPointId], references: [id])
  createdAt         DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime     @updatedAt @db.Timestamptz(6)
  stockPoint        stockPoint   @relation(fields: [stockPointId], references: [id])
  stockPointId      Int
  singleTrip        singleTrip[]
  truck             truck        @relation(fields: [truckId], references: [id])
  truckId           Int

  @@schema("subContract")
}

model stockPointToUnloadingPointTrip {
  id                Int            @id @default(autoincrement())
  fuel              fuel[]
  startDate         Int
  filledLoad        Int
  invoiceNumber     String
  freightAmount     Int
  transporterAmount Int
  createdAt         DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime       @updatedAt @db.Timestamptz(6)
  stockPoint        stockPoint     @relation(fields: [stockPointId], references: [id])
  stockPointId      Int
  unloadingPoint    unloadingPoint @relation(fields: [unloadingPointId], references: [id])
  unloadingPointId  Int
  singleTrip        singleTrip[]
  truck             truck          @relation(fields: [truckId], references: [id])
  truckId           Int

  @@schema("subContract")
}

model loadingPointToUnloadingPointTrip {
  id                     Int            @id @default(autoincrement())
  fuel                   fuel[]
  startDate              Int
  filledLoad             Int
  wantFuel               Boolean        @default(false)
  tripStatus             Boolean        @default(false)
  freightAmount          Int
  transporterAmount      Int
  totalFreightAmount     Int
  totalTransporterAmount Int
  transporterBalance     Int            @default(0)
  margin                 Int
  loadingPointId         Int
  loadingPoint           loadingPoint   @relation(fields: [loadingPointId], references: [id])
  invoiceNumber          String
  createdAt              DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime       @updatedAt @db.Timestamptz(6)
  unloadingPoint         unloadingPoint @relation(fields: [unloadingPointId], references: [id])
  unloadingPointId       Int
  singleTrip             singleTrip[]
  truck                  truck          @relation(fields: [truckId], references: [id])
  truckId                Int

  @@schema("subContract")
}

model singleTrip {
  id                                 Int                              @id @default(autoincrement())
  stockPointToUnloadingPointTripId   Int
  stockPointToUnloadingPointTrip     stockPointToUnloadingPointTrip   @relation(fields: [stockPointToUnloadingPointTripId], references: [id])
  loadingPointToStockPointTripId     Int
  loadingPointToStockPointTrip       loadingPointToStockPointTrip     @relation(fields: [loadingPointToStockPointTripId], references: [id])
  createdAt                          DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt                          DateTime                         @updatedAt @db.Timestamptz(6)
  loadingPointToUnloadingPointTrip   loadingPointToUnloadingPointTrip @relation(fields: [loadingPointToUnloadingPointTripId], references: [id])
  loadingPointToUnloadingPointTripId Int

  @@schema("subContract")
}

model bunk {
  id          Int           @id @default(autoincrement())
  bunkName    String
  // contactNumber BigInt
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  fuelStation fuelStation[]

  @@schema("subContract")
}

model fuelStation {
  id        Int      @id @default(autoincrement())
  location  String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  fuel      fuel[]
  bunkId    Int
  bunk      bunk     @relation(fields: [bunkId], references: [id])

  @@schema("subContract")
}

model fuel {
  id                                 Int                               @id @default(autoincrement())
  pricePerliter                      Float
  quantity                           Float
  totalprice                         Float
  loadingPointToStockPointTripId     Int?
  loadingPointToStockPointTrip       loadingPointToStockPointTrip?     @relation(fields: [loadingPointToStockPointTripId], references: [id])
  stockPointToUnloadingPointTripId   Int?
  stockPointToUnloadingPointTrip     stockPointToUnloadingPointTrip?   @relation(fields: [stockPointToUnloadingPointTripId], references: [id])
  loadingPointToUnloadingPointTripId Int?
  loadingPointToUnloadingPointTrip   loadingPointToUnloadingPointTrip? @relation(fields: [loadingPointToUnloadingPointTripId], references: [id])
  fuelStation                        fuelStation                      @relation(fields: [fuelStationId], references: [id])
  fuelStationId                      Int
  createdAt                          DateTime                          @default(now()) @db.Timestamptz(6)
  updatedAt                          DateTime                          @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}

model truck {
  id                               Int                                @id @default(autoincrement())
  vehicleNumber                    String                             @unique
  capacity                         Int
  transporterId                    Int
  transporter                      transporter                        @relation(fields: [transporterId], references: [id])
  createdAt                        DateTime                           @default(now()) @db.Timestamptz(6)
  updatedAt                        DateTime                           @updatedAt @db.Timestamptz(6)
  loadingPointToStockPointTrip     loadingPointToStockPointTrip[]
  stockPointToUnloadingPointTrip   stockPointToUnloadingPointTrip[]
  loadingPointToUnloadingPointTrip loadingPointToUnloadingPointTrip[]

  @@schema("subContract")
}

model pricePoint {
  id                    Int            @id @default(autoincrement())
  loadingPointId        Int
  loadingPoint          loadingPoint   @relation(fields: [loadingPointId], references: [id])
  unloadingPointId      Int
  unloadingPoint        unloadingPoint @relation(fields: [unloadingPointId], references: [id])
  freightAmount         Int
  transporterAmount     Int
  transporterPercentage Int
  createdAt             DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime       @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}

model paymentDues {
  id            Int      @id @default(autoincrement())
  name          String
  tripId        Int
  dueDate       Int
  type          String
  status        Boolean  @default(false)
  payableAmount Int
  transactionId String?
  paidAt        Int?
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}
