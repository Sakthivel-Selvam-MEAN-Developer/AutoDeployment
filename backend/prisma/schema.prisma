generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "multiSchema"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
  schemas    = ["wonderMove", "peopleOrg", "identity", "subContract", "driverSalary", "accounting", "keycloak"]
}

model customers {
  id              Int      @id @default(autoincrement())
  name            String?  @unique
  pan             String?
  gst             String?
  iGst            String?
  sGst            String?
  cGst            String?
  isGstBilling    Boolean?
  ourVendorCode   String?
  isTDSApplicable Boolean?
  tdsPercentage   Int?
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)
  contactPersonId Int?     @unique
  contactPerson   people?  @relation(fields: [contactPersonId], references: [id])
  addressLine1    String?
  addressLine2    String?
  AddressLine3    String?
  pincode         BigInt?
  state           String?
  city            String?

  @@schema("wonderMove")
}

model people {
  id        Int        @id @default(autoincrement())
  name      String?
  email     String?
  mobile    BigInt?
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)
  customers customers?

  @@schema("wonderMove")
}

model vehicles {
  id                  Int                 @id @default(autoincrement())
  number              String?             @unique
  make                String?
  type                String?
  ownershipType       String?
  ownerName           String?
  insuranceExpiryDate DateTime?           @db.Timestamptz(6)
  taxExpiryDate       DateTime?           @db.Timestamptz(6)
  npPermitDate        DateTime?           @db.Timestamptz(6)
  fiveYearPermitDate  DateTime?           @db.Timestamptz(6)
  fcDate              DateTime?           @db.Timestamptz(6)
  createdAt           DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime            @updatedAt @db.Timestamptz(6)
  traccarDevice       traccarDevice?
  gpsStops            gpsStops[]
  vehicleMovements    vehicleMovements[]
  loconavDevice       loconavDevice?
  ktTelematicsDevice  ktTelematicsDevice?

  @@schema("wonderMove")
}

model traccarDevice {
  id        Int      @id @default(autoincrement())
  traccarId Int      @unique
  vehicleId Int      @unique
  vehicle   vehicles @relation(fields: [vehicleId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@schema("wonderMove")
}

model loconavDevice {
  id              Int      @id @default(autoincrement())
  loconavDeviceId Int      @unique
  vehicleId       Int      @unique
  loconavToken    String
  vehicle         vehicles @relation(fields: [vehicleId], references: [id])
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  @@schema("wonderMove")
}

model ktTelematicsDevice {
  id                   Int      @id @default(autoincrement())
  ktTelematicsDeviceId Int      @unique
  vehicleId            Int      @unique
  ktTelematicsToken    String
  vehicle              vehicles @relation(fields: [vehicleId], references: [id])
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime @updatedAt @db.Timestamptz(6)

  @@schema("wonderMove")
}

model stopReasons {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  stops     stops[]  @relation

  @@schema("wonderMove")
}

model stops {
  id               Int         @id @default(autoincrement())
  startTime        Int
  endTime          Int
  durationInMillis Int
  active           Boolean     @default(true)
  reason           stopReasons @relation(fields: [stopReasonId], references: [id])
  stopReasonId     Int
  gpsStop          gpsStops    @relation(fields: [gpsStopId], references: [id])
  gpsStopId        Int
  createdAt        DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime    @updatedAt @db.Timestamptz(6)

  @@schema("wonderMove")
}

model gpsStops {
  id               Int      @id @default(autoincrement())
  startTime        Int
  endTime          Int
  durationInMillis Int
  vehicle          vehicles @relation(fields: [vehicleId], references: [id])
  vehicleId        Int
  latitude         Float
  longitude        Float
  source           String
  stops            stops[]
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)

  @@unique([vehicleId, startTime], name: "vehicleStop")
  @@schema("wonderMove")
}

model vehicleMovements {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  eventTime Int
  latitude  Float
  longitude Float
  source    String
  speed     Float
  vehicleId Int
  vehicle   vehicles @relation(fields: [vehicleId], references: [id])

  @@schema("wonderMove")
}

model leaveReasons {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  leaves    leaves[]

  @@schema("peopleOrg")
}

model leaves {
  id            Int          @id @default(autoincrement())
  appliedOn     Int
  from          Int
  to            Int
  isFromHalfDay Boolean
  isToHalfDay   Boolean
  active        Boolean      @default(true)
  approval      Boolean?
  comments      String
  deniedComment String?
  leaveReasonId Int
  leaveReason   leaveReasons @relation(fields: [leaveReasonId], references: [id])
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(6)
  employeeId    String
  employee      employees    @relation(fields: [employeeId], references: [employeeId])

  @@schema("peopleOrg")
}

model orgUnits {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @updatedAt @db.Timestamptz(6)
  employees          employees[]
  orgUnitHeads       orgUnitHeads[]
  parentOrgRelations orgUnitRelations[] @relation("ParentRelations")
  childOrgRelations  orgUnitRelations[] @relation("ChildRelations")

  @@schema("peopleOrg")
}

model employees {
  id           Int            @id @default(autoincrement())
  employeeId   String         @unique
  name         String
  jobTitle     String
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt @db.Timestamptz(6)
  orgUnitId    Int
  orgUnit      orgUnits       @relation(fields: [orgUnitId], references: [id])
  orgUnitHeads orgUnitHeads[]
  leaves       leaves[]

  @@schema("peopleOrg")
}

model orgUnitHeads {
  id         Int        @id @default(autoincrement())
  orgUnit    orgUnits?  @relation(fields: [orgUnitId], references: [id])
  orgHead    employees? @relation(fields: [employeeId], references: [id])
  orgUnitId  Int?
  employeeId Int?

  @@schema("peopleOrg")
}

model orgUnitRelations {
  id          Int       @id @default(autoincrement())
  parentOrg   orgUnits? @relation("ParentRelations", fields: [parentOrgId], references: [id])
  childOrg    orgUnits? @relation("ChildRelations", fields: [childOrgId], references: [id])
  parentOrgId Int?
  childOrgId  Int?

  @@schema("peopleOrg")
}

model transporter {
  id                  Int      @id @default(autoincrement())
  name                String   @unique
  csmName             String
  emailId             String   @unique
  contactPersonName   String
  contactPersonNumber String   @unique
  address             String
  hasGst              Boolean  @default(false)
  gstNumber           String?
  gstPercentage       Float?   @db.DoublePrecision
  hasTds              Boolean  @default(false)
  transporterType     String
  tdsPercentage       Float?   @db.DoublePrecision
  accountHolder       String
  accountNumber       String   @unique
  branchName          String?
  ifsc                String
  accountTypeNumber   Int
  createdAt           DateTime @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime @updatedAt @db.Timestamptz(6)
  trucks              truck[]

  @@schema("subContract")
}

model accountType {
  id                Int      @id @default(autoincrement())
  accountTypeName   String   @unique
  accountTypeNumber Int      @unique
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}

model cementCompany {
  id                  Int              @id @default(autoincrement())
  name                String           @unique
  advanceType         Int              @default(70)
  gstNo               String
  address             String
  emailId             String           @unique
  contactPersonName   String
  contactPersonNumber String
  loadingPoints       loadingPoint[]
  stockPoints         stockPoint[]
  unloadingPoints     unloadingPoint[]
  createdAt           DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime         @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}

model loadingPoint {
  id                               Int                                @id @default(autoincrement())
  name                             String
  createdAt                        DateTime                           @default(now()) @db.Timestamptz(6)
  updatedAt                        DateTime                           @updatedAt @db.Timestamptz(6)
  loadingPointToStockPointTrip     loadingPointToStockPointTrip[]
  loadingPointToUnloadingPointTrip loadingPointToUnloadingPointTrip[]
  cementCompany                    cementCompany                      @relation(fields: [cementCompanyId], references: [id])
  cementCompanyId                  Int
  pricePoint                       pricePoint[]
  pricePointMarker                 pricePointMarker                   @relation(fields: [pricePointMarkerId], references: [id])
  pricePointMarkerId               Int

  @@schema("subContract")
}

model stockPoint {
  id                           Int                            @id @default(autoincrement())
  name                         String
  loadingPointToStockPointTrip loadingPointToStockPointTrip[]
  createdAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt                    DateTime                       @updatedAt @db.Timestamptz(6)
  cementCompany                cementCompany                  @relation(fields: [cementCompanyId], references: [id])
  cementCompanyId              Int
  pricePoint                   pricePoint[]
  pricePointMarker             pricePointMarker               @relation(fields: [pricePointMarkerId], references: [id])
  pricePointMarkerId           Int

  @@schema("subContract")
}

model unloadingPoint {
  id                               Int                                @id @default(autoincrement())
  name                             String
  stockPointToUnloadingPointTrip   stockPointToUnloadingPointTrip[]
  loadingPointToUnloadingPointTrip loadingPointToUnloadingPointTrip[]
  createdAt                        DateTime                           @default(now()) @db.Timestamptz(6)
  updatedAt                        DateTime                           @updatedAt @db.Timestamptz(6)
  cementCompany                    cementCompany                      @relation(fields: [cementCompanyId], references: [id])
  cementCompanyId                  Int
  pricePoint                       pricePoint[]
  pricePointMarker                 pricePointMarker                   @relation(fields: [pricePointMarkerId], references: [id])
  pricePointMarkerId               Int

  @@schema("subContract")
}

model pricePointMarker {
  id             Int              @id @default(autoincrement())
  location       String
  loadingPoint   loadingPoint[]
  stockPoint     stockPoint[]
  unloadingPoint unloadingPoint[]
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}

model loadingPointToStockPointTrip {
  id                             Int                              @id @default(autoincrement())
  startDate                      Int
  filledLoad                     Float                            @db.DoublePrecision
  wantFuel                       Boolean?
  tripStatus                     Boolean                          @default(false)
  freightAmount                  Float                            @db.DoublePrecision
  transporterAmount              Float                            @db.DoublePrecision
  totalFreightAmount             Float                            @db.DoublePrecision
  totalTransporterAmount         Float                            @db.DoublePrecision
  margin                         Float                            @db.DoublePrecision
  loadingPointId                 Int
  invoiceNumber                  String                           @unique
  loadingPoint                   loadingPoint                     @relation(fields: [loadingPointId], references: [id])
  createdAt                      DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt                      DateTime                         @updatedAt @db.Timestamptz(6)
  stockPoint                     stockPoint                       @relation(fields: [stockPointId], references: [id])
  stockPointId                   Int
  truck                          truck                            @relation(fields: [truckId], references: [id])
  truckId                        Int
  stockPointToUnloadingPointTrip stockPointToUnloadingPointTrip[]
  overallTrip                    overallTrip[]
  billNo                         String?

  @@schema("subContract")
}

model stockPointToUnloadingPointTrip {
  id                             Int                          @id @default(autoincrement())
  startDate                      Int
  invoiceNumber                  String                       @unique
  tripStatus                     Boolean                      @default(false)
  acknowledgeDueTime             Int?
  freightAmount                  Float                        @db.DoublePrecision
  transporterAmount              Float                        @db.DoublePrecision
  totalFreightAmount             Float                        @db.DoublePrecision
  totalTransporterAmount         Float                        @db.DoublePrecision
  createdAt                      DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                      DateTime                     @updatedAt @db.Timestamptz(6)
  unloadingPoint                 unloadingPoint               @relation(fields: [unloadingPointId], references: [id])
  unloadingPointId               Int
  loadingPointToStockPointTrip   loadingPointToStockPointTrip @relation(fields: [loadingPointToStockPointTripId], references: [id])
  loadingPointToStockPointTripId Int
  overallTrip                    overallTrip[]
  truck                          truck?                       @relation(fields: [truckId], references: [id])
  truckId                        Int?
  billNo                         String?

  @@schema("subContract")
}

model loadingPointToUnloadingPointTrip {
  id                     Int            @id @default(autoincrement())
  startDate              Int
  filledLoad             Float          @db.DoublePrecision
  wantFuel               Boolean?
  tripStatus             Boolean        @default(false)
  acknowledgeDueTime     Int?
  freightAmount          Float          @db.DoublePrecision
  transporterAmount      Float          @db.DoublePrecision
  totalFreightAmount     Float          @db.DoublePrecision
  totalTransporterAmount Float          @db.DoublePrecision
  margin                 Float          @db.DoublePrecision
  invoiceNumber          String         @unique
  loadingPointId         Int
  loadingPoint           loadingPoint   @relation(fields: [loadingPointId], references: [id])
  createdAt              DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime       @updatedAt @db.Timestamptz(6)
  unloadingPoint         unloadingPoint @relation(fields: [unloadingPointId], references: [id])
  unloadingPointId       Int
  truck                  truck          @relation(fields: [truckId], references: [id])
  truckId                Int
  overallTrip            overallTrip[]
  billNo                 String?

  @@schema("subContract")
}

model bunk {
  id                Int      @id @default(autoincrement())
  bunkName          String
  location          String
  accountHolder     String
  accountNumber     String   @unique
  ifsc              String
  accountTypeNumber Int
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @db.Timestamptz(6)
  fuel              fuel[]

  @@schema("subContract")
}

model fuel {
  id            Int          @id @default(autoincrement())
  fueledDate    Int
  invoiceNumber String       @unique
  pricePerliter Float        @db.DoublePrecision
  quantity      Float        @db.DoublePrecision
  totalprice    Float        @db.DoublePrecision
  paymentStatus Boolean      @default(false)
  vehicleNumber String
  bunk          bunk         @relation(fields: [bunkId], references: [id])
  bunkId        Int
  overallTrip   overallTrip? @relation(fields: [overallTripId], references: [id])
  overallTripId Int?
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @default(now()) @db.Timestamptz(6)

  @@schema("subContract")
}

model truck {
  id                               Int                                @id @default(autoincrement())
  vehicleNumber                    String                             @unique
  capacity                         Int
  transporterId                    Int
  transporter                      transporter                        @relation(fields: [transporterId], references: [id])
  createdAt                        DateTime                           @default(now()) @db.Timestamptz(6)
  updatedAt                        DateTime                           @updatedAt @db.Timestamptz(6)
  loadingPointToStockPointTrip     loadingPointToStockPointTrip[]
  loadingPointToUnloadingPointTrip loadingPointToUnloadingPointTrip[]
  stockPointToUnloadingPointTrip   stockPointToUnloadingPointTrip[]

  @@schema("subContract")
}

model pricePoint {
  id                    Int             @id @default(autoincrement())
  freightAmount         Float           @db.DoublePrecision
  transporterAmount     Float           @db.DoublePrecision
  transporterPercentage Float           @db.DoublePrecision
  loadingPointId        Int?
  loadingPoint          loadingPoint?   @relation(fields: [loadingPointId], references: [id])
  unloadingPointId      Int?
  unloadingPoint        unloadingPoint? @relation(fields: [unloadingPointId], references: [id])
  stockPointId          Int?
  stockPoint            stockPoint?     @relation(fields: [stockPointId], references: [id])
  createdAt             DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime        @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}

model paymentDues {
  id            Int          @id @default(autoincrement())
  name          String
  vehicleNumber String
  dueDate       Int
  fuelId        Int?
  type          String
  status        Boolean      @default(false)
  NEFTStatus    Boolean      @default(false)
  payableAmount Float        @db.DoublePrecision
  transactionId String?
  paidAt        Int?
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(6)
  overallTrip   overallTrip? @relation(fields: [overallTripId], references: [id])
  overallTripId Int?

  @@schema("subContract")
}

model shortageQuantity {
  id               Int          @id @default(autoincrement())
  overallTrip      overallTrip? @relation(fields: [overallTripId], references: [id])
  overallTripId    Int?
  shortageQuantity Int
  shortageAmount   Int
  approvalStatus   Boolean      @default(false)
  reason           String?
  filledLoad       Int
  unloadedQuantity Int
  unloadedDate     Int
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(6)

  @@schema("subContract")
}

model overallTrip {
  id                                 Int                               @id @default(autoincrement())
  acknowledgementStatus              Boolean                           @default(false)
  paymentDues                        paymentDues[]
  loadingPointToStockPointTripId     Int?
  loadingPointToStockPointTrip       loadingPointToStockPointTrip?     @relation(fields: [loadingPointToStockPointTripId], references: [id])
  stockPointToUnloadingPointTripId   Int?
  stockPointToUnloadingPointTrip     stockPointToUnloadingPointTrip?   @relation(fields: [stockPointToUnloadingPointTripId], references: [id])
  loadingPointToUnloadingPointTripId Int?
  loadingPointToUnloadingPointTrip   loadingPointToUnloadingPointTrip? @relation(fields: [loadingPointToUnloadingPointTripId], references: [id])
  fuel                               fuel[]
  createdAt                          DateTime                          @default(now()) @db.Timestamptz(6)
  updatedAt                          DateTime                          @updatedAt @db.Timestamptz(6)
  shortageQuantity                   shortageQuantity[]

  @@schema("subContract")
}

model billNo {
  id         Int    @id
  lastBillNo String

  @@schema("subContract")
}

model driver {
  id                 Int                @id @default(autoincrement())
  name               String
  fatherName         String
  dateofBirth        Int
  aadharNumber       String             @unique
  panNumber          String             @unique
  address            String
  mobileNumber       String             @unique
  driverLicense      String             @unique
  licenseExpriryDate Int
  bankName           String
  accountNumber      String             @unique
  accountBranch      String
  ifcsCode           String             @unique
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @updatedAt @db.Timestamptz(6)
  driverTrip         driverTrip[]
  driverAttendance   driverAttendance[]

  @@schema("driverSalary")
}

model driverTrip {
  id            Int      @id @default(autoincrement())
  tripId        Int
  tripStartDate Int
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)
  driver        driver   @relation(fields: [driverId], references: [id])
  driverId      Int

  @@schema("driverSalary")
}

model driverAttendance {
  id             Int      @id @default(autoincrement())
  date           Int
  driverPresence Boolean
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)
  driver         driver   @relation(fields: [driverId], references: [id])
  driverId       Int

  @@schema("driverSalary")
}

model expenses {
  id              Int          @id @default(autoincrement())
  expenseType     expensesType
  amount          Int
  expenseApproval Boolean      @default(false)
  createdAt       DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime     @updatedAt @db.Timestamptz(6)
  tripId          Int

  @@schema("driverSalary")
}

enum expensesType {
  LOADING_CHARGES
  UNLOADING_CHARGES
  TOLL_EXPENSES
  TRIP_ALLOWANCE
  CASE_SLIP_EXPENSES
  ROUTE_ALLOWANCES
  OFFICE_EXPENSES
  GREASING_CHARGES
  AIR_CHECKUP_CHARGES
  TOOLS_SPARES_CHARGES
  WORKSHOP_SHOWROOM_CHARGES
  PHONE_ATM_CHARGES
  EMAIL_CHRGES
  PUNCTURE_CHARGES
  PARKING_CHARGES
  WEIGHT_BRIDGE_CHARGES
  OIL_CHARGES
  ADBLUE_OIL_CHARGES
  MECHANICAL_EXPENSES
  SAFETY_EXEPENSES
  ELECTRICAL_EXPENSES
  MISCELLANCEOUS_EXPENSES

  @@schema("driverSalary")
}

model account {
  id                  Int               @id @default(autoincrement())
  balance             Float             @default(0)
  entries             entry[]
  kind                accountKindEnum
  transactingEntityId Int
  transactingEntity   transactingEntity @relation(fields: [transactingEntityId], references: [id])

  @@unique([transactingEntityId, kind])
  @@schema("accounting")
}

model transactingEntity {
  id      Int              @id @default(autoincrement())
  name    String
  types   entityTypeEnum[]
  gst     String?
  pan     String?
  address String?
  contact String?
  account account[]

  @@schema("accounting")
}

enum entityTypeEnum {
  CUSTOMER
  VENDOR
  TRANSPORTER
  EMPLOYEE
  SELF

  @@schema("accounting")
}

enum accountKindEnum {
  RECEIVABLE
  PAYABLE
  BANK
  CASH
  GST_RECEIVABLE
  GST_PAYABLE

  @@schema("accounting")
}

model transaction {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  entries entry[]

  @@schema("accounting")
}

model entry {
  id            Int         @id @default(autoincrement())
  amount        Float
  type          entryType
  accountId     Int
  transactionId Int
  account       account     @relation(fields: [accountId], references: [id])
  transaction   transaction @relation(fields: [transactionId], references: [id])

  @@schema("accounting")
}

enum entryType {
  DEBIT
  CREDIT

  @@schema("accounting")
}
