services:
  db:
    image: "timescale/timescaledb-ha:pg15-ts2.12"
    platform: linux/amd64
    environment:
      POSTGRES_PASSWORD: "chumma"
    ports:
      - 15432:5432
    networks:
      - postgres-network
    volumes:
      - ./docker/db-docker-data/:/var/lib/postgresql/data/
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  setup:
    image: node:21.5.0-alpine3.18
    volumes:
      - ./:/app/
    working_dir: /app
    command: ["./deploy/setup.sh"]

  migrate:
    image: node:21.5.0-alpine3.18
    volumes:
      - ./:/app/
    working_dir: /app
    command: ["yarn", "b", "prismaMigrateDev" ]

  backend:
    build:
      context:  backend
    platform: linux/amd64
    ports:
      - 8000:8000
    networks:
      - postgres-network
    volumes:
      - ./:/app/
    command: ["yarn", "b", "runProd"]

  nginx:
    image: "nginx:1.25.3-alpine3.18"
    build:
      context: web
    platform: linux/amd64
    depends_on:
      - backend
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx:/usr/share/nginx
      - ./nginx/logs:/usr/share/nginx/logs
    networks:
      - postgres-network
    command: [nginx-debug, '-g', 'daemon off;']

  terra:
    image: "alpine/terragrunt:1.7.3"
    platform: linux/amd64
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: "us-east-1"
      TF_LOG: debug
    volumes:
      - ./:/app/
    working_dir: /app
    command: ["./deploy/terraform.sh"]

networks:
  postgres-network:
    driver: bridge