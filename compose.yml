services:
  db:
    image: "timescale/timescaledb-ha:pg15-ts2.12"
    platform: linux/amd64
    environment:
      POSTGRES_PASSWORD: "chumma"
    ports:
      - 15432:5432
    networks:
      - postgres-network
    volumes:
      - ./docker/db-docker-data/:/var/lib/postgresql/data/
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  setup:
    image: node:21.5.0-alpine3.18
    volumes:
      - ./:/app/
    working_dir: /app
    command: ["sh", "-c","/app/deploy/setup.sh"]

  migrate:
    image: node:21.5.0-alpine3.18
    volumes:
      - ./:/app/
    working_dir: /app
    command: ["yarn", "b", "prismaMigrateDev" ]
    depends_on:
      - setup

  backend:
    image: arm64v8/node:21.5.0-alpine3.18
    volumes:
      - ./:/app/
    working_dir: /app
    ports:
      - 8000:8000
    networks:
      - postgres-network
    command: ["yarn", "b", "runProd"]

  keycloak:
    image: "quay.io/keycloak/keycloak:23.0.7-0"
    networks:
      - postgres-network
    ports:
        - 8080:8080
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ./keycloak:/config
    command: ["--verbose", "--config-file=/config/keycloak.conf", "start-dev"]

  nginx:
    image: arm64v8/nginx:1.25.3-alpine3.18
    depends_on:
      - backend
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx:/usr/share/nginx
      - ./nginx/logs:/usr/share/nginx/logs
    networks:
      - postgres-network
    command: [nginx-debug, '-g', 'daemon off;']

  terra:
     image: "alpine/terragrunt:1.7.3"
     platform: linux/amd64
     environment:
       AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
       AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
       AWS_DEFAULT_REGION: "us-east-1"
       GANDI_PERSONAL_ACCESS_TOKEN: ${GANDI_PERSONAL_ACCESS_TOKEN}
       TF_LOG: error
     volumes:
       - ./:/app/
     working_dir: /app/deploy/live/test
     command: ["bash"]

networks:
  postgres-network:
    driver: bridge
