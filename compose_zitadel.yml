version: '3.8'
services:
  db:
    image: "timescale/timescaledb-ha:pg15-ts2.12"
    platform: linux/amd64
    environment:
      POSTGRES_PASSWORD: "chumma"
      # POSTGRES_MAX_CONNECTIONS: "300"
      # SHARED_PUFFERS: "80MB" 
    ports:
      - 15432:5432
    networks:
      - postgres-network
    volumes:
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  setup:
    image: node:21.5.0-alpine3.18
    volumes:
      - ./:/app/
    working_dir: /app
    command: [ "sh", "-c", "/app/deploy/setup.sh" ]

  migrate:
    image: node:21.5.0-alpine3.18
    volumes:
      - ./:/app/
    working_dir: /app
    command: [ "yarn", "b", "prismaMigrateDev" ]
    depends_on:
      - setup

  zitadel:
    image: ghcr.io/zitadel/zitadel:latest
    ports:
      - 9000:8080
    command: 'start-from-init --masterkey "03ddc480-8c7c-4cc6-8fb6-07465409" --tlsMode disabled'
    environment:
      - 'ZITADEL_DATABASE_POSTGRES_HOST=db'
      - 'ZITADEL_DATABASE_POSTGRES_PORT=5432'
      - 'ZITADEL_DATABASE_POSTGRES_DATABASE=zitadel'
      - 'ZITADEL_DATABASE_POSTGRES_USER_USERNAME=postgres'
      - 'ZITADEL_DATABASE_POSTGRES_USER_PASSWORD=chumma'
      - 'ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE=disable'
      - 'ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME=postgres'
      - 'ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD=chumma'
      - 'ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE=disable'
      - 'ZITADEL_EXTERNALSECURE=false'
    depends_on:
      - db
    networks:
      - postgres-network

  backend:
    image: arm64v8/node:21.5.0-alpine3.18
    volumes:
      - ./:/app/
    working_dir: /app
    ports:
      - 8000:8000
    networks:
      - postgres-network
    command: [ "yarn", "b", "runProd" ]

  certbot:
    image: certbot/certbot:v2.9.0
    volumes:
      - ./docker/certs/:/etc/letsencrypt/

  nginx:
    image: arm64v8/nginx:1.25.3-alpine3.18
    depends_on:
      - backend
    ports:
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx:/usr/share/nginx
      - ./nginx/logs:/usr/share/nginx/logs
    networks:
      - postgres-network
    command: [ nginx-debug, '-g', 'daemon off;' ]

  local-nginx:
    image: nginx:1.25.3-alpine3.18
    ports:
      - 8080:8080
      - 80:80
    volumes:
      - ./nginx/nginx-local.conf:/etc/nginx/nginx.conf
      - ./nginx:/usr/share/nginx
      - ./nginx/logs:/usr/share/nginx/logs
    networks:
      - postgres-network
    command: [ nginx-debug, '-g', 'daemon off;' ]

  terra:
    image: "alpine/terragrunt:1.8.4"
    platform: linux/amd64
    environment:
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: "us-east-1"
      GANDI_PERSONAL_ACCESS_TOKEN: ${GANDI_PERSONAL_ACCESS_TOKEN}
      TF_LOG: error
    volumes:
      - ./:/app/
    working_dir: /app/deploy/terra/env/test
    command: [ "bash" ]

networks:
  postgres-network:
    driver: bridge
