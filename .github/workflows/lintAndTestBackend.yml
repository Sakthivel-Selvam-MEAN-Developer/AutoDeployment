name: Backend
run-name: ${{ github.actor }} - ${{ github.event.head_commit.message }} commit is running
on:
  push:
    paths:
      - 'backend/**'
jobs:
  BackendLintAndTest:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: timescale/timescaledb-ha:pg15-ts2.12
        env:
          POSTGRES_DB: wonderwhyci
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
      - run: yarn install
      - run: yarn b format
      - run: yarn b lint
      - run: yarn b build
      - run: yarn b prismaUp
      - run: yarn b prismaMigrateCi
      # - run: yarn b testCI
      - name: Upload Dist
        uses: actions/upload-artifact@v2
        with:
          name: dist-folder-backend
          path: backend/dist/

  AutoDeployment:
    runs-on: ubuntu-latest
    needs: [BackendLintAndTest]
    steps:
      - name: Download dist folder
        uses: actions/download-artifact@v2
        with:
          name: dist-folder-backend
          path: backend/dist/

      - name: List Files
        run: ls
        
      - name: Get Runner IP
        run: |
          IP_ADDRESS=$(curl -s https://api.ipify.org)
          echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV

      - name: Set Variables
        run: echo "ELASTIC_IP=ec2-user@44.195.5.175" >> $GITHUB_ENV

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update Security Group
        run: |
          SECURITY_GROUP_ID="sg-0aac2fccc9245503f" 
          IP_ADDRESS=${{ env.IP_ADDRESS }}
          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${IP_ADDRESS}/32

      - name: Setup SSH Key
        env:
          SSH_PEM: ${{ secrets.PRIVATE_KEY }}
        run: |
            echo "$SSH_PEM" > deploy_key.pem
            chmod 600 deploy_key.pem

      - name: Clone Repository
        run: git clone --depth 1 https://github.com/Sakthivel-Selvam-MEAN-Developer/AutoDeployment.git

      - name: Clone Dist Folder
        run: rsync -avz -e 'ssh -i deploy_key.pem' backend/dist/*  ${{ env.ELASTIC_IP }}:~/AutoDeployment/backend/dist/
      
      - name: Clone Screts from Github to EC2
        run: rsync -avz  -e 'ssh -i deploy_key.pem -o StrictHostKeyChecking=no' ${{secrets.AWS_ENV}}  ${{ env.ELASTIC_IP }}:~/AutoDeployment/backend/.env

      - name: Start Docker Container
        run : |
          ssh -i deploy_key.pem ${{ env.ELASTIC_IP }}  << EOF
            set -e
            sudo yum update
            docker-compose stop backend
            docker-compose up setup -d
            docker-compose up migrate -d
            docker-compose up backend -d
          EOF
        
      - name: Remove Added Security Group Rule
        run: |
          SECURITY_GROUP_ID="sg-0aac2fccc9245503f" 
          IP_ADDRESS=${{ env.IP_ADDRESS }}
          aws ec2 revoke-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${IP_ADDRESS}/32
